{"version":3,"sources":["workflow/WorkflowDiagram.js","common/Sheet.js","common/Toastr.js","workflow-configurations/DocumentReviewConfiguration.js","workflow-configurations/DocumentUploadConfiguration.js","workflow/WorkflowCreation.js","workflow/ViewWorkflow.js","workflow-table/WorkFlowHome.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["WorkflowDiagram","diagramInstance","type","onNodeClick","useState","workflowType","setWorkflowType","useEffect","nodes","id","height","width","offsetX","offsetY","annotations","content","connectors","sourceID","targetID","setTemplate","useCallback","props","onClick","alert","ref","diagram","nodeTemplate","created","args","forEach","node","add","connector","click","clickedObj","actualObject","clickedObjId","properties","useStyles","makeStyles","theme","sheetTitle","padding","margin","textAlign","drawer","flexShrink","drawerPaper","boxAlign","Sheet","isOpen","title","handleClose","children","classes","Drawer","className","variant","anchor","open","paper","DialogTitle","Box","IconButton","Toastr","header","body","style","position","top","right","Toast","show","delay","autohide","Header","Body","DocumentReviewEditConfiguration","useFormikContext","values","setFieldValue","Form","Group","Label","name","labelKey","multiple","onChange","value","options","placeholder","selected","reviewers","DocumentReviewViewConfiguration","workflowId","configuration","setConfiguration","step","status","console","log","as","Row","controlId","column","sm","Col","ListGroup","map","reviewer","Item","DocumentUploadEditConfiguration","selectedDocument","DocumentUploadViewConfiguration","document","Control","plaintext","readOnly","WorkflowCreation","nodeId","setNodeId","openConfigurationSheet","setOpenConfigurationSheet","showSuccessToast","showWorkflowStartToast","useParams","handleNodeClick","clickedNodeId","handleSheetClose","getNodeConfiguration","handleWorkflowSave","a","initialValues","workflowName","onSubmit","handleSubmit","handleChange","Container","fluid","xs","Text","Button","color","DialogContent","DialogActions","ViewWorkflow","WorkFlowHome","history","useHistory","display","justifyContent","DropdownButton","Dropdown","NavLink","to","Table","striped","bordered","hover","item","push","handleRowClick","Home","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a2466bc.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport {\n  DiagramComponent\n} from \"@syncfusion/ej2-react-diagrams\"\n\n\nexport const WorkflowDiagram = ({type, onNodeClick}) => {\n\n  let diagramInstance\n\n  const [workflowType, setWorkflowType] = useState({})\n\n  useEffect(() => {\n    if(type && type === 'sequential'){\n      const sequential = {\n        nodes: [\n          {\n            id: \"node1\",\n            height: 100,\n            width: 100,\n            offsetX: 200,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 1 - Document Selection\"\n              }\n            ]\n          //   shape: {\n          //     type: 'HTML',\n          //   }\n          },\n          {\n            id: \"node2\",\n            height: 100,\n            width: 100,\n            offsetX: 400,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 2 - Document Review\"\n              }\n            ]\n          },\n          {\n            id: \"node3\",\n            height: 100,\n            width: 100,\n            offsetX: 600,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 3 - Document Review\"\n              }\n            ]\n          },\n          {\n            id: \"node4\",\n            height: 100,\n            width: 100,\n            offsetX: 800,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 4 - Document Review\"\n              }\n            ]\n          }\n        ],\n        connectors: [\n          {\n            id: \"connector1\",\n            sourceID: \"node1\",\n            targetID: \"node2\"\n          },\n          {\n            id: \"connector2\",\n            sourceID: \"node2\",\n            targetID: \"node3\"\n          },\n          {\n            id: \"connector3\",\n            sourceID: \"node3\",\n            targetID: \"node4\"\n          }\n        ]\n      }\n      setWorkflowType(sequential)\n    }else if(type === 'parallel'){\n      const parallel = {\n        nodes: [\n          {\n            id: \"node1\",\n            height: 100,\n            width: 100,\n            offsetX: 200,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 1 - Document Selection\"\n              }\n            ]\n          //   shape: {\n          //     type: 'HTML',\n          //   }\n          },\n          {\n            id: \"node2\",\n            height: 100,\n            width: 100,\n            offsetX: 400,\n            offsetY: 100,\n            annotations: [\n              {\n                content: \"Step 2 - Document Review\"\n              }\n            ]\n          }\n        ],\n        connectors: [\n          {\n            id: \"connector1\",\n            sourceID: \"node1\",\n            targetID: \"node2\"\n          }\n        ]\n      }\n      setWorkflowType(parallel)\n    }\n  }, [type])\n\n  \n\n  const setTemplate = useCallback((props) => {\n    if(props.id === 'node1'){\n      return (<button onClick={() => alert('test')}>Test</button>)\n    }\n  }, [])\n  \n\n  return (\n        <DiagramComponent id=\"diagram\" width={\"100%\"} height={\"550px\"} \n            ref={diagram => (diagramInstance = diagram)}\n            nodeTemplate={setTemplate}\n            created={(args) => {\n                workflowType.nodes.forEach(node => {\n                    diagramInstance.add(node)\n                })\n                workflowType.connectors.forEach(connector => {\n                    diagramInstance.add(connector)\n                })\n            }}\n            click={(args) => {\n                if(args){\n                    const clickedObj = args.actualObject\n                    if(clickedObj){\n                      const clickedObjId = clickedObj.properties.id\n                      onNodeClick && onNodeClick(clickedObjId)\n                    }\n                }\n            }}\n       />\n  );\n}\n","import { Drawer, IconButton, DialogTitle, Box } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react'\n\nconst drawerWidth = 440;\n\nconst useStyles = makeStyles((theme) => ({\n    sheetTitle: {\n        padding: 0,\n        margin: '0 0 24px 24px',\n        textAlign: 'left'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    boxAlign: {\n        textAlign: 'right'\n    }\n}))\n\nexport const Sheet = ({isOpen = false, title, handleClose, children}) => {\n\n    const classes = useStyles();\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={isOpen}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <DialogTitle className={classes.sheetTitle}>\n                <Box className={classes.boxAlign}>\n                    <IconButton onClick={handleClose}>\n                        <CloseIcon />\n                    </IconButton>\n                </Box>\n                {title}\n            </DialogTitle>\n            {children}\n        </Drawer>\n    )\n}","import React from 'react'\nimport Toast from 'react-bootstrap/Toast'\n\nexport const Toastr = ({isOpen, header, body}) => {\n    return (\n        <div\n            style={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            }}\n        >\n            <Toast show={isOpen} delay={3000} autohide>\n                <Toast.Header>\n                    <strong className=\"mr-auto\">{header}</strong>\n                </Toast.Header>\n                <Toast.Body>{body}</Toast.Body>\n            </Toast>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport { useFormikContext } from 'formik'\n\nexport const DocumentReviewEditConfiguration = () => {\n\n    const { values, setFieldValue } = useFormikContext()\n\n    const options = [\n        'Pritam',\n        'Ashish',\n        'Anupam'\n    ]\n\n    const handleChange = (value) => {\n        if(value){\n            setFieldValue('reviewers', value)\n        }\n    }\n\n    return (\n        <>\n            <Form.Group>\n                <Form.Label>Select reviewers to review</Form.Label>\n                <Typeahead\n                id=\"basic-typeahead-multiple\"\n                name=\"reviewers\"\n                labelKey=\"name\"\n                multiple\n                onChange={handleChange}\n                options={options}\n                placeholder=\"Choose reviewers...\"\n                selected={values.reviewers}\n                />\n            </Form.Group>\n        </>\n\n    )\n}\n\nexport const DocumentReviewViewConfiguration = ({workflowId}) => {\n\n    const [configuration, setConfiguration] = useState({})\n\n    useEffect(() => {\n        //get configuration using workflowId\n        const configuration = {\n            step: 2,\n            reviewers: [\n                {\n                    name: 'Apoorva',\n                    status: 'In Progress'\n                },\n                {\n                    name: 'Aniva',\n                    status: 'Not started'\n                }\n            ]\n        }\n        console.log(configuration)\n        setConfiguration(configuration)\n    }, [workflowId])\n\n    return (\n        <>\n            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n                <Form.Label column sm=\"12\">\n                Reviewers\n                </Form.Label>\n                <Col sm=\"10\">\n                    {\n                        configuration && configuration.reviewers &&\n                        <ListGroup>\n                            {\n                                configuration.reviewers.map(reviewer => \n                                    <ListGroup.Item>{reviewer.name} - {reviewer.status}</ListGroup.Item>)\n                            }\n                        </ListGroup>\n                    }\n                </Col>\n            </Form.Group>\n        </>\n\n    )\n}","import React, { useState, useEffect } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { useFormikContext } from 'formik'\n\nexport const DocumentUploadEditConfiguration = () => {\n\n    const { values, setFieldValue } = useFormikContext()\n\n    const options = [\n        'F24H Wizard',\n        'MadCap Flare POC'\n    ]\n\n    const handleChange = (value) => {\n        if(value){\n            setFieldValue('selectedDocument', value)\n        }\n    }\n\n    return (\n            <>\n                <Form.Group>\n                    <Form.Label>Select document to review</Form.Label>\n                    <Typeahead\n                    id=\"basic-typeahead-single\"\n                    name=\"selectedDocument\"\n                    labelKey=\"name\"\n                    onChange={handleChange}\n                    options={options}\n                    placeholder=\"Choose a document...\"\n                    selected={values.selectedDocument}\n                    />\n                </Form.Group>\n            </>\n\n    )\n}\n\nexport const DocumentUploadViewConfiguration = ({workflowId}) => {\n\n    const [configuration, setConfiguration] = useState({})\n\n    useEffect(() => {\n        //get configuration using workflowId\n        const configuration = {\n            step: 1,\n            document: 'F2H Wizard'\n        }\n        setConfiguration(configuration)\n    }, [workflowId])\n\n    return (\n            <>\n                <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n                    <Form.Label column sm=\"12\">\n                    Document to review\n                    </Form.Label>\n                    <Col sm=\"10\">\n                    <Form.Control plaintext readOnly value={configuration.document} />\n                    </Col>\n                </Form.Group>\n            </>\n\n    )\n}","import React, { useState, useCallback } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { WorkflowDiagram } from './WorkflowDiagram'\nimport { Sheet, Toastr } from '../common'\nimport { DocumentReviewEditConfiguration, DocumentUploadEditConfiguration } from '../workflow-configurations'\nimport { DialogActions, DialogContent } from '@material-ui/core'\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\nimport { Formik } from 'formik'\nimport { useParams } from 'react-router-dom'\n\nexport const WorkflowCreation = () => {\n\n    const [nodeId, setNodeId] = useState('')\n    const [openConfigurationSheet, setOpenConfigurationSheet] = useState(false)\n    const [showSuccessToast, setShowSuccessToast] = useState(false)\n    const [showWorkflowStartToast, setShowWorkflowStartToast] = useState(false)\n    const { type } = useParams()\n    \n    const handleNodeClick = (clickedNodeId) => {\n        if(clickedNodeId){\n            setNodeId(clickedNodeId)\n            setOpenConfigurationSheet(true)\n        }\n    }\n\n    const handleSheetClose = () => {\n        setOpenConfigurationSheet(false)\n    }\n\n    const getNodeConfiguration = useCallback(() => {\n        if(nodeId){\n            switch(nodeId){\n                case 'node1': \n                    return <DocumentUploadEditConfiguration />\n                case 'node2':\n                    return <DocumentReviewEditConfiguration />\n                default:\n                    return null\n                \n            }\n        }\n    }, [nodeId])\n\n    const handleWorkflowSave = async (values) => {\n        console.log('values', values)\n\n        //TODO - API call to initiate workflow\n        // const response = await fetch('http://localhost:8888/workflow/initiate', {\n        //     method: 'POST'\n        // })\n\n        // if(response.ok){\n        //     setShowWorkflowStartToast(true)\n        //     //redirect to workflow listing\n        // }else{\n        //     //show error toast\n        // }\n    }\n\n    return (            \n            <Formik initialValues={{selectedDocument: [], reviewers: [], workflowName: ''}} onSubmit={handleWorkflowSave}>\n                        {({\n                            handleSubmit,\n                            handleChange\n                        }) => (\n                            <Form onSubmit={handleSubmit}>\n                            <Container fluid>\n                    <Row style={{margin: '20px'}}>\n                        <Col xs={4} style={{textAlign: 'left'}}><h4>Create Workflow</h4></Col>\n                        <Col xs={4}>\n                            <Form.Group controlId=\"formWorkflowName\">\n                                <Form.Control type=\"text\" name=\"workflowName\" onChange={handleChange}/>\n                                <Form.Text className=\"text-muted\">\n                                    Give your workflow a name\n                                </Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={2}>\n                            <Button variant=\"primary\" type=\"submit\">Start Workflow</Button>\n                        </Col>\n                        <Col xs={2}>\n                            <span>Status: <FiberManualRecordIcon style={{color: 'grey'}} />Not Started</span>\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Col>\n                            \n                            <WorkflowDiagram type={type} onNodeClick={handleNodeClick} />\n                            \n                                    <Sheet isOpen={openConfigurationSheet} handleClose={handleSheetClose} title=\"Step Configuration\">\n                                        <DialogContent>\n                                            {getNodeConfiguration()}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button variant=\"light\" onClick={handleSheetClose}>Close</Button>\n                                        </DialogActions>\n                                    </Sheet>\n                                \n                        </Col>\n                    </Row>\n\n                    <Toastr isOpen={showSuccessToast} header=\"Workflow Configuration\" body=\"Saved step configuration\" />\n                    <Toastr isOpen={showWorkflowStartToast} header=\"Workflow\" body=\"New workflow started\" />\n                    </Container>    \n            \n            </Form>\n            )}\n            </Formik>\n    )\n}","import React, { useState, useCallback } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { WorkflowDiagram } from './WorkflowDiagram'\nimport { Sheet } from '../common'\nimport { DocumentReviewViewConfiguration, DocumentUploadViewConfiguration } from '../workflow-configurations'\nimport { DialogActions, DialogContent } from '@material-ui/core'\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\nimport { useParams } from 'react-router-dom'\n\nexport const ViewWorkflow = () => {\n\n    let { workflowId } = useParams()\n\n    const [nodeId, setNodeId] = useState('')\n    const [openConfigurationSheet, setOpenConfigurationSheet] = useState(false)\n\n    const handleNodeClick = (clickedNodeId) => {\n        if(clickedNodeId){\n            setNodeId(clickedNodeId)\n            setOpenConfigurationSheet(true)\n        }\n    }\n\n    const handleSheetClose = () => {\n        setOpenConfigurationSheet(false)\n    }\n\n    const getNodeConfiguration = useCallback(() => {\n        if(nodeId){\n            switch(nodeId){\n                case 'node1': \n                    return <DocumentUploadViewConfiguration workflowId={workflowId} />\n                case 'node2':\n                    return <DocumentReviewViewConfiguration workflowId={workflowId} />\n                default:\n                    return null\n                \n            }\n        }\n    }, [nodeId, workflowId])\n\n    return (\n        <>\n            <Container fluid>\n                <Row style={{margin: '20px'}}>\n                    <Col xs={6} style={{textAlign: 'left'}}><h4>View Workflow</h4></Col>\n                    <Col xs={3}>\n                        <span>Status: <FiberManualRecordIcon style={{color: 'grey'}} />Not Started</span>\n                    </Col>\n\n                </Row>\n                <Row>\n                    <Col>\n                        \n                        <WorkflowDiagram onNodeClick={handleNodeClick} />\n                        <Sheet isOpen={openConfigurationSheet} handleClose={handleSheetClose} title=\"Step Configuration\">\n                            <DialogContent>\n                                {getNodeConfiguration()}\n                            </DialogContent>\n                            <DialogActions>\n                                <Button variant=\"light\" onClick={handleSheetClose}>Cancel</Button>\n                            </DialogActions>\n                        </Sheet>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Table from 'react-bootstrap/Table'\nimport { useHistory } from 'react-router-dom'\n\nexport const WorkFlowHome = () => {\n  const history = useHistory()\n\n  const userData = [\n    {\n      id: 1,\n      name: 'First User',\n      type: 'In Approval',\n      status: 'In Progress'\n    },\n    {\n      id: 2,\n      name: 'Second User',\n      type: 'In Approval',\n      status: 'In Progress'\n    }\n  ]\n\n  const handleRowClick = (item) => {\n    if(item && item.id){\n      history.push(`/workflows/view/${item.id}`)\n    }\n  }\n\n  return (\n    <Container fluid>\n      <Row style={{ margin: '20px' }}>\n        <Col xs={6} style={{ textAlign: 'left' }}><h3>Your Workflows</h3></Col>\n        <Col xs={6} style={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <DropdownButton id=\"dropdown-item-button\" title=\"Create Workflows\">\n            <Dropdown.Item as={NavLink} to=\"/workflows/create/sequential\">Sequential Review</Dropdown.Item>\n            <Dropdown.Item as={NavLink} to=\"/workflows/create/parallel\">Parallel Review</Dropdown.Item>\n          </DropdownButton>\n        </Col>\n      </Row>\n\n      <Row style={{ margin: '40px' }}>\n        <Table striped bordered hover variant=\"dark\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {userData.map(item => {\n              return (\n                <tr onClick={() => handleRowClick(item)}>\n                  <td>{item.id}</td>\n                  <td>{item.name}</td>\n                  <td>{item.type}</td>\n                  <td>{item.status}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </Table>\n      </Row>\n    </Container>\n  )\n}","import React from 'react'\nimport { WorkFlowHome } from './workflow-table/WorkFlowHome'\n\nexport const Home = () => {\n  return (\n    <WorkFlowHome />\n  )\n}","import React from 'react'\nimport './App.css'\nimport { Route, HashRouter } from 'react-router-dom'\nimport { WorkflowCreation, ViewWorkflow } from './workflow'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-typeahead/css/Typeahead.css'\nimport { WorkFlowHome } from './workflow-table/WorkFlowHome'\nimport { Home } from './Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/workflows/\" component={WorkFlowHome} />\n        <Route exact path=\"/workflows/create/:type\" component={WorkflowCreation} />\n        <Route exact path=\"/workflows/view/:workflowId\" component={ViewWorkflow} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}