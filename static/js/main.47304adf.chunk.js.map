{"version":3,"sources":["Home.js","workflow/WorkflowDiagram.js","common/Sheet.js","workflow-configurations/DocumentReviewConfiguration.js","workflow-configurations/DocumentUploadConfiguration.js","workflow/Workflow.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","WorkflowDiagram","diagramInstance","onNodeClick","sequentialWorkflow","nodes","id","height","width","offsetX","offsetY","annotations","content","connectors","sourceID","targetID","setTemplate","useCallback","props","onClick","alert","ref","diagram","nodeTemplate","created","args","forEach","node","add","connector","click","clickedObjId","actualObject","properties","useStyles","makeStyles","theme","sheetTitle","padding","margin","textAlign","drawer","flexShrink","drawerPaper","boxAlign","Sheet","isOpen","title","handleClose","children","classes","Drawer","className","variant","anchor","open","paper","DialogTitle","Box","IconButton","DocumentReviewConfiguration","useState","multiSelections","setMultiSelections","Form","Group","Label","labelKey","multiple","onChange","options","placeholder","selected","DocumentUploadConfiguration","singleSelections","setSingleSelections","Workflow","nodeId","setNodeId","openConfigurationSheet","setOpenConfigurationSheet","showSuccessToast","setShowSuccessToast","handleSheetClose","getNodeConfiguration","Container","fluid","Row","style","Col","xs","Button","clickedNodeId","console","log","DialogContent","DialogActions","position","top","right","Toast","show","onClose","Header","Body","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47304adf.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport const Home = () => {\n    return (\n        <>\n            <div>Workflow Management PoC</div>\n            <ul>\n                <li><NavLink to=\"/workflows/create\">Workflow creation</NavLink></li>\n            </ul>\n        </>\n    )\n}","import React, { useCallback } from 'react';\nimport {\n  DiagramComponent\n} from \"@syncfusion/ej2-react-diagrams\"\n\n\nexport const WorkflowDiagram = ({onNodeClick}) => {\n\n  let diagramInstance\n\n  const sequentialWorkflow = {\n      nodes: [\n        {\n          id: \"node1\",\n          height: 100,\n          width: 100,\n          offsetX: 200,\n          offsetY: 100,\n          annotations: [\n            {\n              content: \"Step 1 - Document Selection\"\n            }\n          ]\n        //   shape: {\n        //     type: 'HTML',\n        //   }\n        },\n        {\n          id: \"node2\",\n          height: 100,\n          width: 100,\n          offsetX: 400,\n          offsetY: 300,\n          annotations: [\n            {\n              content: \"Step 2 - Document Review\"\n            }\n          ]\n        }\n      ],\n      connectors: [\n        {\n          id: \"connector1\",\n          sourceID: \"node1\",\n          targetID: \"node2\"\n        }\n      ]\n  }\n\n  const setTemplate = useCallback((props) => {\n    if(props.id === 'node1'){\n      return (<button onClick={() => alert('test')}>Test</button>)\n    }\n  }, [])\n  \n\n  return (\n        <DiagramComponent id=\"diagram\" width={\"100%\"} height={\"550px\"} \n            ref={diagram => (diagramInstance = diagram)}\n            nodeTemplate={setTemplate}\n            created={(args) => {\n                sequentialWorkflow.nodes.forEach(node => {\n                    diagramInstance.add(node)\n                })\n                sequentialWorkflow.connectors.forEach(connector => {\n                    diagramInstance.add(connector)\n                })\n            }}\n            click={(args) => {\n                if(args){\n                    const clickedObj = args.actualObject\n                    const clickedObjId = clickedObj.properties.id\n                    onNodeClick && onNodeClick(clickedObjId)\n                }\n            }}\n       />\n  );\n}\n","import { Drawer, IconButton, DialogTitle, Box } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react'\n\nconst drawerWidth = 440;\n\nconst useStyles = makeStyles((theme) => ({\n    sheetTitle: {\n        padding: 0,\n        margin: '0 0 24px 24px',\n        textAlign: 'left'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    boxAlign: {\n        textAlign: 'right'\n    }\n}))\n\nexport const Sheet = ({isOpen = false, title, handleClose, children}) => {\n\n    const classes = useStyles();\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={isOpen}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <DialogTitle className={classes.sheetTitle}>\n                <Box className={classes.boxAlign}>\n                    <IconButton onClick={handleClose}>\n                        <CloseIcon />\n                    </IconButton>\n                </Box>\n                {title}\n            </DialogTitle>\n            {children}\n        </Drawer>\n    )\n}","import React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { Typeahead } from 'react-bootstrap-typeahead'\n\nexport const DocumentReviewConfiguration = () => {\n\n    const [multiSelections, setMultiSelections] = useState([])\n\n    const options = [\n        'Pritam',\n        'Ashish',\n        'Anupam'\n    ]\n\n    return (\n        <>\n            <Form.Group>\n                <Form.Label>Select reviewers to review</Form.Label>\n                <Typeahead\n                id=\"basic-typeahead-multiple\"\n                labelKey=\"name\"\n                multiple\n                onChange={setMultiSelections}\n                options={options}\n                placeholder=\"Choose reviewers...\"\n                selected={multiSelections}\n                />\n            </Form.Group>\n        </>\n\n    )\n}","import React, { useState, Fragment } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { Typeahead } from 'react-bootstrap-typeahead'\n\nexport const DocumentUploadConfiguration = () => {\n\n    const [singleSelections, setSingleSelections] = useState([])\n\n    const options = [\n        'F24H Wizard',\n        'MadCap Flare POC'\n    ]\n\n    return (\n            <Fragment>\n                <Form.Group>\n                    <Form.Label>Select document to review</Form.Label>\n                    <Typeahead\n                    id=\"basic-typeahead-single\"\n                    labelKey=\"name\"\n                    onChange={setSingleSelections}\n                    options={options}\n                    placeholder=\"Choose a document...\"\n                    selected={singleSelections}\n                    />\n                </Form.Group>\n            </Fragment>\n\n    )\n}","import React, { useState, useCallback } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Toast from 'react-bootstrap/Toast'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { WorkflowDiagram } from './WorkflowDiagram'\nimport { Sheet } from '../common'\nimport { DocumentReviewConfiguration, DocumentUploadConfiguration } from '../workflow-configurations'\nimport { DialogActions, DialogContent } from '@material-ui/core'\n\nexport const Workflow = () => {\n\n    const [nodeId, setNodeId] = useState('')\n    const [openConfigurationSheet, setOpenConfigurationSheet] = useState(false)\n    const [showSuccessToast, setShowSuccessToast] = useState(false)\n\n    const handleNodeClick = (clickedNodeId) => {\n        if(clickedNodeId){\n            setNodeId(clickedNodeId)\n            console.log('node clicked')\n            setOpenConfigurationSheet(true)\n        }\n    }\n\n    const handleSheetClose = () => {\n        setOpenConfigurationSheet(false)\n    }\n    \n    const handleStepConfigurationSave = () => {\n        setShowSuccessToast(true)\n        setOpenConfigurationSheet(false)\n    }\n\n    const getNodeConfiguration = useCallback(() => {\n        if(nodeId){\n            switch(nodeId){\n                case 'node1': \n                    return <DocumentUploadConfiguration />\n                case 'node2':\n                    return <DocumentReviewConfiguration />\n                default:\n                    return null\n                \n            }\n        }\n    }, [nodeId])\n\n    const handleToastClose = () => {\n        setShowSuccessToast(false)\n    }\n\n    return (\n        <>\n\n            <Container fluid>\n            <Row style={{margin: '20px'}}>\n                <Col xs={6} style={{textAlign: 'left'}}><h4>Create Workflow</h4></Col>\n                <Col xs={6}>\n                    <Button variant=\"primary\">Start Workflow</Button>{' '}\n                    <span>Status: Not Started</span>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col>\n                    \n                    <WorkflowDiagram onNodeClick={handleNodeClick} />\n                    <Sheet isOpen={openConfigurationSheet} handleClose={handleSheetClose} title=\"Step Configuration\">\n                        <DialogContent>\n                            {getNodeConfiguration()}\n                        </DialogContent>\n                        <DialogActions>\n                            <Button variant=\"light\" onClick={handleSheetClose}>Cancel</Button>\n                            <Button variant=\"primary\" onClick={handleStepConfigurationSave}>Save</Button>\n                        </DialogActions>\n                    </Sheet>\n                </Col>\n            </Row>\n\n            <div\n                style={{\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                }}\n            >\n                <Toast show={showSuccessToast} onClose={handleToastClose}>\n                    <Toast.Header>\n                        <strong className=\"mr-auto\">Workflow Configuration</strong>\n                    </Toast.Header>\n                    <Toast.Body>Saved step configuration</Toast.Body>\n                </Toast>\n            </div>\n            </Container>        \n        </>\n    )\n}","import React from 'react'\nimport './App.css'\nimport { Route, HashRouter } from 'react-router-dom'\nimport { Home } from './Home'\nimport { Workflow } from './workflow'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/workflows/create\" component={Workflow} />\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}